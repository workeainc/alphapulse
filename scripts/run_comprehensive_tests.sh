#!/bin/bash
# Comprehensive Testing Runner
# Runs both backend and frontend integration tests
# Phase 7: Testing & Validation

echo "🚀 Starting Comprehensive Testing Suite"
echo "========================================"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local status=$1
    local message=$2
    case $status in
        "SUCCESS")
            echo -e "${GREEN}✅ $message${NC}"
            ;;
        "ERROR")
            echo -e "${RED}❌ $message${NC}"
            ;;
        "WARNING")
            echo -e "${YELLOW}⚠️  $message${NC}"
            ;;
        "INFO")
            echo -e "${BLUE}ℹ️  $message${NC}"
            ;;
    esac
}

# Check if backend server is running
check_backend_server() {
    print_status "INFO" "Checking if backend server is running..."
    
    if curl -s http://localhost:8000/api/single-pair/status > /dev/null 2>&1; then
        print_status "SUCCESS" "Backend server is running"
        return 0
    else
        print_status "ERROR" "Backend server is not running on localhost:8000"
        print_status "INFO" "Please start the backend server first:"
        print_status "INFO" "  cd backend && python -m uvicorn app.main_ai_system_simple:app --host 0.0.0.0 --port 8000"
        return 1
    fi
}

# Check if frontend dependencies are installed
check_frontend_deps() {
    print_status "INFO" "Checking frontend dependencies..."
    
    if [ -f "frontend/package.json" ]; then
        if [ -d "frontend/node_modules" ]; then
            print_status "SUCCESS" "Frontend dependencies are installed"
            return 0
        else
            print_status "WARNING" "Frontend dependencies not installed"
            print_status "INFO" "Installing frontend dependencies..."
            cd frontend && npm install && cd ..
            return 0
        fi
    else
        print_status "ERROR" "Frontend package.json not found"
        return 1
    fi
}

# Run backend tests
run_backend_tests() {
    print_status "INFO" "Running backend integration tests..."
    
    if [ -f "backend/test_real_data_integration.py" ]; then
        cd backend
        python test_real_data_integration.py
        local backend_exit_code=$?
        cd ..
        
        if [ $backend_exit_code -eq 0 ]; then
            print_status "SUCCESS" "Backend tests passed"
            return 0
        else
            print_status "ERROR" "Backend tests failed"
            return 1
        fi
    else
        print_status "ERROR" "Backend test file not found"
        return 1
    fi
}

# Run frontend tests
run_frontend_tests() {
    print_status "INFO" "Running frontend integration tests..."
    
    if [ -f "frontend/test_frontend_integration.js" ]; then
        cd frontend
        node test_frontend_integration.js
        local frontend_exit_code=$?
        cd ..
        
        if [ $frontend_exit_code -eq 0 ]; then
            print_status "SUCCESS" "Frontend tests passed"
            return 0
        else
            print_status "ERROR" "Frontend tests failed"
            return 1
        fi
    else
        print_status "ERROR" "Frontend test file not found"
        return 1
    fi
}

# Generate combined report
generate_combined_report() {
    print_status "INFO" "Generating combined test report..."
    
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    local report_file="comprehensive_test_report_${timestamp}.md"
    
    cat > "$report_file" << EOF
# Comprehensive Test Report
**Generated:** $(date)
**Test Suite:** Real Data Integration Testing

## Test Summary

### Backend Tests
- **Status:** $([ -f "backend/real_data_integration_test_report_"*.json ] && echo "✅ PASSED" || echo "❌ FAILED")
- **Report:** $(ls backend/real_data_integration_test_report_*.json 2>/dev/null | tail -1 || echo "No report found")

### Frontend Tests  
- **Status:** $([ -f "frontend/frontend_integration_test_report_"*.json ] && echo "✅ PASSED" || echo "❌ FAILED")
- **Report:** $(ls frontend/frontend_integration_test_report_*.json 2>/dev/null | tail -1 || echo "No report found")

## Recommendations

1. **Review individual test reports** for detailed results
2. **Fix any failing tests** before proceeding to production
3. **Run performance tests** under load conditions
4. **Validate data consistency** across all components

## Next Steps

1. **Performance Testing:** Load testing and optimization
2. **Production Deployment:** Deploy to production environment
3. **Monitoring Setup:** Set up production monitoring
4. **Documentation:** Final user guides and API documentation

---
*Generated by Comprehensive Testing Suite*
EOF

    print_status "SUCCESS" "Combined report generated: $report_file"
}

# Main execution
main() {
    local start_time=$(date +%s)
    
    print_status "INFO" "Starting comprehensive testing suite..."
    
    # Check prerequisites
    if ! check_backend_server; then
        exit 1
    fi
    
    if ! check_frontend_deps; then
        exit 1
    fi
    
    # Run tests
    local backend_success=true
    local frontend_success=true
    
    if ! run_backend_tests; then
        backend_success=false
    fi
    
    if ! run_frontend_tests; then
        frontend_success=false
    fi
    
    # Generate combined report
    generate_combined_report
    
    # Final status
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    echo ""
    echo "========================================"
    print_status "INFO" "Testing completed in ${duration} seconds"
    
    if [ "$backend_success" = true ] && [ "$frontend_success" = true ]; then
        print_status "SUCCESS" "All tests passed! System is ready for production."
        exit 0
    else
        print_status "ERROR" "Some tests failed. Check the reports for details."
        exit 1
    fi
}

# Run main function
main "$@"
