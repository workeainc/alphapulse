# Multi-stage build for production
FROM python:3.11-slim as builder

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements and install Python dependencies
COPY requirements.prod.txt requirements.txt
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Production stage
FROM python:3.11-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    libpq5 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Create non-root user
RUN useradd --create-home --shell /bin/bash alphapulse && \
    mkdir -p /app && \
    chown -R alphapulse:alphapulse /app

# Set working directory
WORKDIR /app

# Copy application code
COPY --chown=alphapulse:alphapulse . .

# Set Python path to include the current directory
ENV PYTHONPATH="/app:${PYTHONPATH}"

# Create necessary directories
RUN mkdir -p /app/logs /app/data /app/models && \
    chown -R alphapulse:alphapulse /app/logs /app/data /app/models

# Switch to non-root user
USER alphapulse

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose ports
EXPOSE 8000 8050

# Default command
CMD ["python", "-m", "uvicorn", "backend.app.main_simple:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]
